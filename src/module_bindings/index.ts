// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CheckProjectileCollisions } from "./check_projectile_collisions_reducer.ts";
export { CheckProjectileCollisions };
import { CleanupInactiveUsers } from "./cleanup_inactive_users_reducer.ts";
export { CleanupInactiveUsers };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { DamageEnemy } from "./damage_enemy_reducer.ts";
export { DamageEnemy };
import { MovePlayer } from "./move_player_reducer.ts";
export { MovePlayer };
import { RespawnBoss } from "./respawn_boss_reducer.ts";
export { RespawnBoss };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetName } from "./set_name_reducer.ts";
export { SetName };
import { Shoot } from "./shoot_reducer.ts";
export { Shoot };

// Import and reexport all table handle types
import { CheckProjectileCollisionsScheduleTableHandle } from "./check_projectile_collisions_schedule_table.ts";
export { CheckProjectileCollisionsScheduleTableHandle };
import { CleanupInactiveUsersScheduleTableHandle } from "./cleanup_inactive_users_schedule_table.ts";
export { CleanupInactiveUsersScheduleTableHandle };
import { EnemyTableHandle } from "./enemy_table.ts";
export { EnemyTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { ProjectileTableHandle } from "./projectile_table.ts";
export { ProjectileTableHandle };
import { RespawnBossScheduleTableHandle } from "./respawn_boss_schedule_table.ts";
export { RespawnBossScheduleTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { CheckProjectileCollisionsSchedule } from "./check_projectile_collisions_schedule_type.ts";
export { CheckProjectileCollisionsSchedule };
import { CleanupInactiveUsersSchedule } from "./cleanup_inactive_users_schedule_type.ts";
export { CleanupInactiveUsersSchedule };
import { Enemy } from "./enemy_type.ts";
export { Enemy };
import { EnemyType } from "./enemy_type_type.ts";
export { EnemyType };
import { Message } from "./message_type.ts";
export { Message };
import { Projectile } from "./projectile_type.ts";
export { Projectile };
import { RespawnBossSchedule } from "./respawn_boss_schedule_type.ts";
export { RespawnBossSchedule };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    check_projectile_collisions_schedule: {
      tableName: "check_projectile_collisions_schedule",
      rowType: CheckProjectileCollisionsSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduled_id",
    },
    cleanup_inactive_users_schedule: {
      tableName: "cleanup_inactive_users_schedule",
      rowType: CleanupInactiveUsersSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduled_id",
    },
    enemy: {
      tableName: "enemy",
      rowType: Enemy.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
    },
    projectile: {
      tableName: "projectile",
      rowType: Projectile.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    respawn_boss_schedule: {
      tableName: "respawn_boss_schedule",
      rowType: RespawnBossSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduled_id",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    check_projectile_collisions: {
      reducerName: "check_projectile_collisions",
      argsType: CheckProjectileCollisions.getTypeScriptAlgebraicType(),
    },
    cleanup_inactive_users: {
      reducerName: "cleanup_inactive_users",
      argsType: CleanupInactiveUsers.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    damage_enemy: {
      reducerName: "damage_enemy",
      argsType: DamageEnemy.getTypeScriptAlgebraicType(),
    },
    move_player: {
      reducerName: "move_player",
      argsType: MovePlayer.getTypeScriptAlgebraicType(),
    },
    respawn_boss: {
      reducerName: "respawn_boss",
      argsType: RespawnBoss.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
    shoot: {
      reducerName: "shoot",
      argsType: Shoot.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CheckProjectileCollisions", args: CheckProjectileCollisions }
| { name: "CleanupInactiveUsers", args: CleanupInactiveUsers }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "DamageEnemy", args: DamageEnemy }
| { name: "MovePlayer", args: MovePlayer }
| { name: "RespawnBoss", args: RespawnBoss }
| { name: "SendMessage", args: SendMessage }
| { name: "SetName", args: SetName }
| { name: "Shoot", args: Shoot }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  checkProjectileCollisions(arg: CheckProjectileCollisionsSchedule) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    CheckProjectileCollisions.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("check_projectile_collisions", __argsBuffer, this.setCallReducerFlags.checkProjectileCollisionsFlags);
  }

  onCheckProjectileCollisions(callback: (ctx: ReducerEventContext, arg: CheckProjectileCollisionsSchedule) => void) {
    this.connection.onReducer("check_projectile_collisions", callback);
  }

  removeOnCheckProjectileCollisions(callback: (ctx: ReducerEventContext, arg: CheckProjectileCollisionsSchedule) => void) {
    this.connection.offReducer("check_projectile_collisions", callback);
  }

  cleanupInactiveUsers(schedule: CleanupInactiveUsersSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    CleanupInactiveUsers.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cleanup_inactive_users", __argsBuffer, this.setCallReducerFlags.cleanupInactiveUsersFlags);
  }

  onCleanupInactiveUsers(callback: (ctx: ReducerEventContext, schedule: CleanupInactiveUsersSchedule) => void) {
    this.connection.onReducer("cleanup_inactive_users", callback);
  }

  removeOnCleanupInactiveUsers(callback: (ctx: ReducerEventContext, schedule: CleanupInactiveUsersSchedule) => void) {
    this.connection.offReducer("cleanup_inactive_users", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  damageEnemy(enemyId: bigint, damage: number) {
    const __args = { enemyId, damage };
    let __writer = new BinaryWriter(1024);
    DamageEnemy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("damage_enemy", __argsBuffer, this.setCallReducerFlags.damageEnemyFlags);
  }

  onDamageEnemy(callback: (ctx: ReducerEventContext, enemyId: bigint, damage: number) => void) {
    this.connection.onReducer("damage_enemy", callback);
  }

  removeOnDamageEnemy(callback: (ctx: ReducerEventContext, enemyId: bigint, damage: number) => void) {
    this.connection.offReducer("damage_enemy", callback);
  }

  movePlayer(x: number, y: number) {
    const __args = { x, y };
    let __writer = new BinaryWriter(1024);
    MovePlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_player", __argsBuffer, this.setCallReducerFlags.movePlayerFlags);
  }

  onMovePlayer(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("move_player", callback);
  }

  removeOnMovePlayer(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("move_player", callback);
  }

  respawnBoss(schedule: RespawnBossSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    RespawnBoss.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("respawn_boss", __argsBuffer, this.setCallReducerFlags.respawnBossFlags);
  }

  onRespawnBoss(callback: (ctx: ReducerEventContext, schedule: RespawnBossSchedule) => void) {
    this.connection.onReducer("respawn_boss", callback);
  }

  removeOnRespawnBoss(callback: (ctx: ReducerEventContext, schedule: RespawnBossSchedule) => void) {
    this.connection.offReducer("respawn_boss", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

  shoot(targetX: number, targetY: number) {
    const __args = { targetX, targetY };
    let __writer = new BinaryWriter(1024);
    Shoot.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("shoot", __argsBuffer, this.setCallReducerFlags.shootFlags);
  }

  onShoot(callback: (ctx: ReducerEventContext, targetX: number, targetY: number) => void) {
    this.connection.onReducer("shoot", callback);
  }

  removeOnShoot(callback: (ctx: ReducerEventContext, targetX: number, targetY: number) => void) {
    this.connection.offReducer("shoot", callback);
  }

}

export class SetReducerFlags {
  checkProjectileCollisionsFlags: CallReducerFlags = 'FullUpdate';
  checkProjectileCollisions(flags: CallReducerFlags) {
    this.checkProjectileCollisionsFlags = flags;
  }

  cleanupInactiveUsersFlags: CallReducerFlags = 'FullUpdate';
  cleanupInactiveUsers(flags: CallReducerFlags) {
    this.cleanupInactiveUsersFlags = flags;
  }

  damageEnemyFlags: CallReducerFlags = 'FullUpdate';
  damageEnemy(flags: CallReducerFlags) {
    this.damageEnemyFlags = flags;
  }

  movePlayerFlags: CallReducerFlags = 'FullUpdate';
  movePlayer(flags: CallReducerFlags) {
    this.movePlayerFlags = flags;
  }

  respawnBossFlags: CallReducerFlags = 'FullUpdate';
  respawnBoss(flags: CallReducerFlags) {
    this.respawnBossFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

  shootFlags: CallReducerFlags = 'FullUpdate';
  shoot(flags: CallReducerFlags) {
    this.shootFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get checkProjectileCollisionsSchedule(): CheckProjectileCollisionsScheduleTableHandle {
    return new CheckProjectileCollisionsScheduleTableHandle(this.connection.clientCache.getOrCreateTable<CheckProjectileCollisionsSchedule>(REMOTE_MODULE.tables.check_projectile_collisions_schedule));
  }

  get cleanupInactiveUsersSchedule(): CleanupInactiveUsersScheduleTableHandle {
    return new CleanupInactiveUsersScheduleTableHandle(this.connection.clientCache.getOrCreateTable<CleanupInactiveUsersSchedule>(REMOTE_MODULE.tables.cleanup_inactive_users_schedule));
  }

  get enemy(): EnemyTableHandle {
    return new EnemyTableHandle(this.connection.clientCache.getOrCreateTable<Enemy>(REMOTE_MODULE.tables.enemy));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get projectile(): ProjectileTableHandle {
    return new ProjectileTableHandle(this.connection.clientCache.getOrCreateTable<Projectile>(REMOTE_MODULE.tables.projectile));
  }

  get respawnBossSchedule(): RespawnBossScheduleTableHandle {
    return new RespawnBossScheduleTableHandle(this.connection.clientCache.getOrCreateTable<RespawnBossSchedule>(REMOTE_MODULE.tables.respawn_boss_schedule));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
